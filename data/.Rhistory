library(ggplot2)
IMDB
data(IMDB)
library(ggplot2movies)
install.packages("ggplot2movies")
data(IMDB)
library(ggplot2movies)
data(IMDB)
# 1. 데이터 가져오기 -------------------------
## 1.1. 가져올 데이터 설정
url <- "http://files.grouplens.org/datasets/movielens/"
dataset_small <- "ml-latest-small"
dataset_full <- "ml-latest"
data_folder <- "data"
archive_type <- ".zip"
## 1.2. 작업 데이터 지정
dataset <- dataset_small
dataset_zip <- paste0(dataset, archive_type)
## 1.3. 데이터 가져와서 압축풀기
if (!file.exists(file.path(data_folder, dataset_zip))) {
download.file(paste0(url, dataset_zip), file.path(data_folder, dataset_zip))
}
unzip(file.path(data_folder, dataset_zip), exdir = "data", overwrite = TRUE)
## 1.4. 작업결과 재확인
list.files('data/', recursive=TRUE)
## 1.5. 데이터 크기 확인
dataset_files <- c("movies", "ratings", "links", "tags")
suffix <- ".csv"
for (f in dataset_files) {
path <- file.path(data_folder, dataset, paste0(f, suffix))
assign(f, read_csv(path, col_types = cols()))
print(paste(f, "파일크기:", format(object.size(get(f)), units="Mb")))
}
library(XML)
for (f in dataset_files) {
path <- file.path(data_folder, dataset, paste0(f, suffix))
assign(f, read_csv(path, col_types = cols()))
print(paste(f, "파일크기:", format(object.size(get(f)), units="Mb")))
}
# 0. 환경설정 --------------------------------
library(tidyverse)
for (f in dataset_files) {
path <- file.path(data_folder, dataset, paste0(f, suffix))
assign(f, read_csv(path, col_types = cols()))
print(paste(f, "파일크기:", format(object.size(get(f)), units="Mb")))
}
# 2. 데이터 전처리 -------------------------------
## 2.1. 사용자 평점 데이터
ratings_df <- ratings %>%
mutate(timestamp = as_datetime(timestamp))
library(lubridate)
# 2. 데이터 전처리 -------------------------------
## 2.1. 사용자 평점 데이터
ratings_df <- ratings %>%
mutate(timestamp = as_datetime(timestamp))
glimpse(ratings_df)
skim(ratings_df)
library(skimr)
install.packages("skimr")
library(skimr)
skim(ratings_df)
## 2.2. 영화 데이터
movies_df <- movies %>%
mutate(title = str_trim(title)) %>%
extract(title, c("title_tmp", "year"), regex = "^(.*) \\(([0-9 \\-]*)\\)$", remove = FALSE) %>%
mutate(year = ifelse(str_length(year) > 4, as.integer(str_split(year, "-", simplify = TRUE)[1]), as.integer(year))) %>%
mutate(title = ifelse(is.na(title_tmp), title, title_tmp)) %>%
select(-title_tmp)  %>%
mutate(genres = ifelse(genres == "(no genres listed)", `is.na<-`(genres), genres))
glimpse(movies_df)
View(movies)
View(movies_df)
skim(movies_df)
## 2.3. 태그 데이터
tags_df <- tags %>%
mutate(timestamp = as_datetime(timestamp))
glimpse(tags_df)
View(tags)
View(tags_df)
skim(tags_df)
## 2.4. 링크 데이터
glimpse(links)
# 3. 탐색적 데이터 분석 --------------------------------------
## 3.1. 연도별 영화 출하 분석 --------------------------------
movies_per_year <- movies_df %>%
na.omit() %>%
select(movieId, year) %>%
group_by(year) %>%
summarise(count = n())  %>%
arrange(year)
movies_per_year %>%
complete(year = full_seq(year, 1), fill = list(count = 0)) %>%
filter(year <=2015) %>%
ggplot(aes(x = year, y = count)) +
geom_line(color="blue", size=1.5) +
scale_y_continuous(labels=scales::comma) +
theme_tufte(base_family="NanumGothic") +
labs(x="", y="연도별 출시 영화빈도수")
library(ggthemes)
movies_per_year %>%
complete(year = full_seq(year, 1), fill = list(count = 0)) %>%
filter(year <=2015) %>%
ggplot(aes(x = year, y = count)) +
geom_line(color="blue", size=1.5) +
scale_y_continuous(labels=scales::comma) +
theme_tufte(base_family="NanumGothic") +
labs(x="", y="연도별 출시 영화빈도수")
library(extrafont)
loadfonts()
movies_per_year %>%
complete(year = full_seq(year, 1), fill = list(count = 0)) %>%
filter(year <=2015) %>%
ggplot(aes(x = year, y = count)) +
geom_line(color="blue", size=1.5) +
scale_y_continuous(labels=scales::comma) +
theme_tufte(base_family="NanumGothic") +
labs(x="", y="연도별 출시 영화빈도수")
## 3.1. 연도별 영화 쟝르 출하 분석 --------------------------------
movies_df %>%
separate_rows(genres, sep = "\\|") %>%
count(genres) %>%
arrange(desc(n)) %>%
mutate(비율 = scales::percent(n/sum(n, na.rm=TRUE)),
누적비율 = scales::percent(cumsum(n/sum(n, na.rm=TRUE)))) %>%
select(영화장르 = genres, 쟝르빈도수=n, 쟝르비율=비율, 누적비율) %>%
DT::datatable() %>%
DT::formatRound("쟝르빈도수", interval=3, digits=0)
movies_df %>%
separate_rows(genres, sep = "\\|") %>%
na.omit() %>%
mutate(genres = as.factor(genres)) %>%
group_by(year, genres) %>%
summarise(number = n()) %>%
complete(year = full_seq(year, 1), genres, fill = list(number = 0)) %>%
filter(genres %in% c("Drama", "Comedy", "Thriller", "Romance", "Action", "Horror")) %>%
filter(year >= 1900 & year <= 2015) %>%
ggplot(aes(x = year, y = number)) +
geom_line(aes(color=genres)) +
scale_fill_brewer(palette = "Paired") +
theme_tufte(base_family="NanumGothic") +
labs(x="", y="연도별 출시 영화빈도수", color="쟝르") +
theme(legend.position = "top")
## 3.3. 각 쟝르별 태그 --------------------------------
genres_tags <- movies_df %>%
na.omit() %>%
select(movieId, year, genres) %>%
separate_rows(genres, sep = "\\|") %>%
inner_join(tags_df, by = "movieId") %>%
select(genres, tag) %>%
group_by(genres) %>%
nest()
wordcloud(genre_words$tag, genre_words$n, max.words = 50, colors=brewer.pal(8, "Dark2"))
library(wordcloud)
install.packages("wordcloud")
library(wordcloud)
wordcloud(genre_words$tag, genre_words$n, max.words = 50, colors=brewer.pal(8, "Dark2"))
genre<-"Action"
genre_words <- genres_tags %>%
filter(genres == genre) %>%
unnest() %>%
mutate(tag = str_to_lower(tag, "en")) %>%
anti_join(tibble(tag=c(tolower(genre)))) %>%
count(tag)
wordcloud(genre_words$tag, genre_words$n, max.words = 50, colors=brewer.pal(8, "Dark2"))
library(stringr)
library(rvest)
library(tidytext)
library(doParallel)
install.packages("tidytext")
install.packages("tidytext")
library(tidytext)
genre<-"Action"
genre_words <- genres_tags %>%
filter(genres == genre) %>%
unnest() %>%
mutate(tag = str_to_lower(tag, "en")) %>%
anti_join(tibble(tag=c(tolower(genre)))) %>%
count(tag)
library(dplyr)
genre_words <- genres_tags %>%
filter(genres == genre) %>%
unnest() %>%
mutate(tag = str_to_lower(tag, "en")) %>%
anti_join(tibble(tag=c(tolower(genre)))) %>%
count(tag)
?unnset()
library(tidyverse)
library(lubridate)
library(skimr)
library(ggthemes)
library(wordcloud)
library(XML)
library(stringr)
library(rvest)
library(tidytext)
library(extrafont)
loadfonts()
library(doParallel)
library(dplyr)
genre<-"Action"
genre_words <- genres_tags %>%
filter(genres == genre) %>%
unnest() %>%
mutate(tag = str_to_lower(tag, "en")) %>%
anti_join(tibble(tag=c(tolower(genre)))) %>%
count(tag)
wordcloud(genre_words$tag, genre_words$n, max.words = 50, colors=brewer.pal(8, "Dark2"))
wordcloud(genre_words$tag, genre_words$n, max.words = 50, colors=brewer.pal(8, "Dark2"))
# plot wordcloud per genre
genre<-"Comedy"
genre_words <- genres_tags %>%
filter(genres == genre) %>%
unnest() %>%
mutate(tag = str_to_lower(tag, "en")) %>%
anti_join(tibble(tag=c(tolower(genre)))) %>%
count(tag)
wordcloud(genre_words$tag, genre_words$n, max.words = 50, colors=brewer.pal(8, "Dark2"))
# plot wordcloud per genre
genre<-"Drama"
genre_words <- genres_tags %>%
filter(genres == genre) %>%
unnest() %>%
mutate(tag = str_to_lower(tag, "en")) %>%
anti_join(tibble(tag=c(tolower(genre)))) %>%
count(tag)
wordcloud(genre_words$tag, genre_words$n, max.words = 50, colors=brewer.pal(8, "Dark2"))
genre_words <- genres_tags %>%
filter(genres == genre) %>%
unnest(cols=c(genre)) %>%
mutate(tag = str_to_lower(tag, "en")) %>%
anti_join(tibble(tag=c(tolower(genre)))) %>%
count(tag)
wordcloud(genre_words$tag, genre_words$n, max.words = 50, colors=brewer.pal(8, "Dark2"))
avg_rating <- ratings_df %>%
inner_join(movies_df, by = "movieId") %>%
na.omit() %>%
select(movieId, title, rating, year) %>%
group_by(movieId, title, year) %>%
summarise(count = n(), mean = mean(rating), min = min(rating), max = max(rating)) %>%
ungroup() %>%
arrange(desc(mean))
weighted_rating <- function(R, v, m, C) {
return (v/(v+m))*R + (m/(v+m))*C
}
# R = average for the movie (mean) = (Rating)
# v = number of votes for the movie = (votes)
# m = minimum votes required to be listed in the Top 250
# C = the mean vote across the whole report
avg_rating <- avg_rating %>%
mutate(wr = weighted_rating(mean, count, 500, mean(mean))) %>%
arrange(desc(wr))
avg_rating
avg_rating %>%
mutate(decade = year  %/% 10 * 10) %>%
arrange(year, desc(wr)) %>%
group_by(decade) %>%
summarise(title = first(title), wr = first(wr), mean = first(mean), count = first(count)) %>%
DT::datatable() %>%
DT::formatRound("count", digits = 0, interval = 3)
genres_rating <- movies_df %>%
na.omit() %>%
select(movieId, year, genres) %>%
inner_join(ratings_df, by = "movieId") %>%
select(-timestamp, -userId) %>%
mutate(decade = year  %/% 10 * 10) %>%
separate_rows(genres, sep = "\\|") %>%
group_by(year, genres) %>%
summarise(count = n(), avg_rating = mean(rating)) %>%
ungroup() %>%
mutate(wr = weighted_rating(mean, count, 500, mean(mean))) %>%
arrange(year)
genres_rating %>%
filter(genres %in% c("Action", "Romance", "Sci-Fi", "Western")) %>%
ggplot(aes(x = year, y = wr)) +
geom_line(aes(group=genres, color=genres)) +
geom_smooth(aes(group=genres, color=genres)) +
facet_wrap(~genres)
# Pearson's Chi-squared test with Yates' continuity correction
#
# data:  xtabs(~결혼여부 + 쿠폰반응여부, data = df_skin)
# X-squared = 7.6562, df = 1, p-value = 0.005658
#
fancyRpartPlot(tree1)
df_skin <- read.csv('./skin.csv', header = T)
setwd("C:/git/R-programing/MLData")
df_skin <- read.csv('./skin.csv', header = T)
str(df_skin)
df_skin <- df_skin[-1] # 1번째 idx 빼고 저장 (고객번호)
head(df_skin)
library(rpart)
tree1 <- rpart(쿠폰반응여부 ~ ., data=df_skin, control=rpart.control(minsplit = 2))
plot(tree1, compress = T, uniform = T, margin=0.1)
text(tree1, use.n = T, col = "blue")
tree1
xtabs(~결혼여부 + 쿠폰반응여부, data=df_skin)
# Pearson's Chi-squared test with Yates' continuity correction
#
# data:  xtabs(~결혼여부 + 쿠폰반응여부, data = df_skin)
# X-squared = 7.6562, df = 1, p-value = 0.005658
#
fancyRpartPlot(tree1)
?fancyRpartPlot()
?
### 과제2 Doit R 시각화
data("USArrests")
??fancyRpartPlot()
??fancyRpartPlot
library(rpart.plot)
install.packages("rpart.plot")
library(RColorBrewer)
library(rpart.plot)
# Pearson's Chi-squared test with Yates' continuity correction
#
# data:  xtabs(~결혼여부 + 쿠폰반응여부, data = df_skin)
# X-squared = 7.6562, df = 1, p-value = 0.005658
#
fancyRpartPlot(tree1)
library(rattle)
install.packages("rattle")
library(rattle)
# Pearson's Chi-squared test with Yates' continuity correction
#
# data:  xtabs(~결혼여부 + 쿠폰반응여부, data = df_skin)
# X-squared = 7.6562, df = 1, p-value = 0.005658
#
fancyRpartPlot(tree1)
# Pearson's Chi-squared test with Yates' continuity correction
#
# data:  xtabs(~결혼여부 + 쿠폰반응여부, data = df_skin)
# X-squared = 7.6562, df = 1, p-value = 0.005658
#
fancyRpartPlot(tree1)
str(df_skin)
head(df_skin)
dim(df_skin)
tree1 <- rpart(쿠폰반응여부 ~ ., data=df_skin, control=rpart.control(minsplit = 2))
plot(tree1, compress = T, uniform = T, margin=0.1)
text(tree1, use.n = T, col = "blue")
tree1
xtabs(~결혼여부 + 쿠폰반응여부, data=df_skin)
chisq.test(xtabs(~결혼여부+쿠폰반응여부, data=df_skin))
# Pearson's Chi-squared test with Yates' continuity correction
#
# data:  xtabs(~결혼여부 + 쿠폰반응여부, data = df_skin)
# X-squared = 7.6562, df = 1, p-value = 0.005658
#
fancyRpartPlot(tree1)
table(df_skin$나이)
table(df_skin$나이)
# Pearson's Chi-squared test with Yates' continuity correction
#
# data:  xtabs(~결혼여부 + 쿠폰반응여부, data = df_skin)
# X-squared = 7.6562, df = 1, p-value = 0.005658
#
fancyRpartPlot(tree1)
# Pearson's Chi-squared test with Yates' continuity correction
#
# data:  xtabs(~결혼여부 + 쿠폰반응여부, data = df_skin)
# X-squared = 7.6562, df = 1, p-value = 0.005658
#
fancyRpartPlot(tree1)
df <- read.csv("./data/tmdb_5000_movies.csv", header=T)
setwd("C:/git/ML-project/data")
df <- read.csv("/tmdb_5000_movies.csv", header=T)
df <- read.csv("./tmdb_5000_movies.csv", header=T)
View(df)
str(df)
df <- read.csv("./movie_metadata.csv", header=T)
str(df)
str(df)
dim(df)
# duplicate rows
sum(duplicated(df))
# delete duplicate rows
df <- df[!duplicated(df), ]
library(stringr)
df$movie_title
df$movie_title <- gsub("Â", "", as.character(factor(df$movie_title)))
df$movie_title
str_trim(df$movie_title, side = "right")
df$movie_title <- gsub("혻", "", as.character(factor(df$movie_title)))
str_trim(df$movie_title, side = "right")
head(df$genres)
